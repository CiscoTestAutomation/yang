#!/bin/env python

from __future__ import print_function

import os
import re
import sys
import time
import fnmatch
import unittest
import argparse
import subprocess

from tempfile import NamedTemporaryFile

from pyats.log.utils import banner

def collect_unittest_files(top):
    files = []

    for root, dirnames, filenames in os.walk(top, followlinks = True):
        for filename in fnmatch.filter(filenames, 'test_*.py'):
            files.append(os.path.join(root, filename))

    return files


HEADER = '\033[95m'
BLUE = '\033[94m'
GREEN = '\033[92m'
RED = '\033[31m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

class UnittestSubprocess(object):



    def __init__(self, testable):
        self.name = '/'.join(testable.split('/')[-2:])
        self.testable = testable
        prefix = '.'.join(testable.split('/')[-2:]).rstrip('.py')
        self.tempfile = NamedTemporaryFile(prefix = prefix)

        cwd = os.path.dirname(os.path.realpath(os.path.abspath(testable)))

        cmd = ('python',
               '-m', 'unittest',
               os.path.splitext(os.path.basename(testable))[0])

        self.process = subprocess.Popen(cmd,
                                        cwd = cwd,
                                        stdout = self.tempfile,
                                        stderr = subprocess.STDOUT)

    def poll(self):
        return self.process.poll()

    def terminate(self):
        self.process.terminate()

    def wait(self):
        self.process.wait()

    def kill(self):
        self.process.kill()

    @property
    def result(self):
        if self.process.returncode:
            return RED + 'FAILED' + ENDC
        else:
            return GREEN + 'PASSED' + ENDC

    @property
    def pid(self):
        return self.process.pid

    @property
    def output(self):
        self.tempfile.seek(0)
        return self.tempfile.read().decode('utf-8')

    @property
    def failures(self):
        # failures starts with =
        failures = self.output[self.output.find('='*70):]

        return '\n'.join(failures.split('\n')[:-4])

    @property
    def numtotal(self):
        # find total
        match = re.search('Ran (\d+) test.*', self.output)
        if match:
            return int(match.group(1))
        else:
            return 0

    @property
    def numerr(self):
        # find total
        match = re.search('errors=(\d+)', self.output)
        if match:
            return int(match.group(1))
        else:
            return 0

    @property
    def numskip(self):
        # find total
        match = re.search('skipped=(\d+)', self.output)
        if match:
            return int(match.group(1))
        else:
            return 0

# Main

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Parallel Run Unittests')
    parser.add_argument('--path',
                        type = str,
                        default = os.getcwd())
    args = parser.parse_args()

    done = []
    processes = []

    print('\n' + banner('- Modules -'))

    start = time.time()

    for testable in sorted(collect_unittest_files(args.path)):
        p = UnittestSubprocess(testable)
        processes.append(p)

        print('%-67s (pid: %5s)' % (p.name, p.pid))

    total = len(processes)
    print('\n' + banner('- Results -'))

    try:
        # wait for everything to finish
        while processes:
            for p in processes:

                time.sleep(0.25)

                if p.poll() is not None:
                    done.append(p)
                    processes.remove(p)

                    print('%-64s- ' % p.name + p.result +
                                             ' (%2s/%-2s)' % (len(done), total))
                else:
                    print(' ' * 80, end = '\r')
                    sys.stdout.flush()
                    print('%s ...' % p.name, end = '\r')
                    sys.stdout.flush()

    except KeyboardInterrupt:
        for p in processes:
            p.terminate()
            p.wait()
            done.append(p)
            print('%-64s- ' % p.name + RED + 'KILLED' + ENDC +
                                             ' (%2s/%-2s)' % (len(done), total))


    print()
    print()

    testResults = sum(p.numtotal for p in done)
    testErrors = sum(p.numerr for p in done)
    testSkips = sum(p.numskip for p in done)
    testAborts = 0

    for p in done:
        if 'PASSED' not in p.result:
            # something went wrong. Subprocess returned a non-zero error code.
            print(p.failures)
            testAborts+=1

    # Ran # of test in 87.769s
    end = time.time()
    elapsed = end - start
    print('Ran %s tests in %.3fs' % (testResults,elapsed))
    print()
    if testErrors or testAborts:
        print('FAILED (errors=%s, skipped=%s, aborts=%s)' % \
            (testErrors, testSkips, testAborts))
        exit(1)
    else:
        print('OK (errors=%s, skipped=%s)' % (testErrors, testSkips))
        exit(0)

